diff --git a/tests/libqos/libqos.h b/tests/libqos/libqos.h
index ca14d2e..e28aa4d 100644
--- a/tests/libqos/libqos.h
+++ b/tests/libqos/libqos.h
@@ -13,6 +13,7 @@ typedef struct QOSOps {
 typedef struct QOSState {
     QTestState *qts;
     QGuestAllocator *alloc;
+    QPCIBus *pcibus;
     QOSOps *ops;
 } QOSState;
 
diff --git a/tests/libqos/virtio-pci.c b/tests/libqos/virtio-pci.c
index fde2ff0..f171dcd 100644
--- a/tests/libqos/virtio-pci.c
+++ b/tests/libqos/virtio-pci.c
@@ -25,6 +25,12 @@ typedef struct QVirtioPCIForeachData {
     void *user_data;
 } QVirtioPCIForeachData;
 
+void qvirtio_pci_device_free(QVirtioPCIDevice *dev)
+{
+    g_free(dev->pdev);
+    g_free(dev);
+}
+
 static QVirtioPCIDevice *qpcidevice_to_qvirtiodevice(QPCIDevice *pdev)
 {
     QVirtioPCIDevice *vpcidev;
@@ -232,6 +238,14 @@ static QVirtQueue *qvirtio_pci_virtqueue_setup(QVirtioDevice *d,
     return &vqpci->vq;
 }
 
+static void qvirtio_pci_virtqueue_cleanup(QVirtQueue *vq, QGuestAllocator *alloc)
+{
+    QVirtQueuePCI *vqpci = container_of(vq, QVirtQueuePCI, vq);
+
+    guest_free(alloc, vq->desc);
+    g_free(vqpci);
+}
+
 static void qvirtio_pci_virtqueue_kick(QVirtioDevice *d, QVirtQueue *vq)
 {
     QVirtioPCIDevice *dev = (QVirtioPCIDevice *)d;
@@ -254,6 +268,7 @@ const QVirtioBus qvirtio_pci = {
     .get_queue_size = qvirtio_pci_get_queue_size,
     .set_queue_address = qvirtio_pci_set_queue_address,
     .virtqueue_setup = qvirtio_pci_virtqueue_setup,
+    .virtqueue_cleanup = qvirtio_pci_virtqueue_cleanup,
     .virtqueue_kick = qvirtio_pci_virtqueue_kick,
 };
 
diff --git a/tests/libqos/virtio-pci.h b/tests/libqos/virtio-pci.h
index 8f0e52a..7a202ec 100644
--- a/tests/libqos/virtio-pci.h
+++ b/tests/libqos/virtio-pci.h
@@ -51,6 +51,8 @@ extern const QVirtioBus qvirtio_pci;
 void qvirtio_pci_foreach(QPCIBus *bus, uint16_t device_type,
                 void (*func)(QVirtioDevice *d, void *data), void *data);
 QVirtioPCIDevice *qvirtio_pci_device_find(QPCIBus *bus, uint16_t device_type);
+
+void qvirtio_pci_device_free(QVirtioPCIDevice *dev);
 void qvirtio_pci_device_enable(QVirtioPCIDevice *d);
 void qvirtio_pci_device_disable(QVirtioPCIDevice *d);
 
diff --git a/tests/libqos/virtio.c b/tests/libqos/virtio.c
index 613dece..0e8d80d 100644
--- a/tests/libqos/virtio.c
+++ b/tests/libqos/virtio.c
@@ -53,6 +53,12 @@ QVirtQueue *qvirtqueue_setup(const QVirtioBus *bus, QVirtioDevice *d,
     return bus->virtqueue_setup(d, alloc, index);
 }
 
+void qvirtqueue_cleanup(const QVirtioBus *bus, QVirtQueue *vq,
+                        QGuestAllocator *alloc)
+{
+    return bus->virtqueue_cleanup(vq, alloc);
+}
+
 void qvirtio_reset(const QVirtioBus *bus, QVirtioDevice *d)
 {
     bus->set_status(d, QVIRTIO_RESET);
diff --git a/tests/libqos/virtio.h b/tests/libqos/virtio.h
index 0101278..43be4bc 100644
--- a/tests/libqos/virtio.h
+++ b/tests/libqos/virtio.h
@@ -137,6 +137,8 @@ typedef struct QVirtioBus {
     /* Setup the virtqueue specified by index */
     QVirtQueue *(*virtqueue_setup)(QVirtioDevice *d, QGuestAllocator *alloc,
                                                                 uint16_t index);
+    /* Free the virtqueue*/
+    void (*virtqueue_cleanup)(QVirtQueue *vq, QGuestAllocator *alloc);
 
     /* Notify changes in virtqueue */
     void (*virtqueue_kick)(QVirtioDevice *d, QVirtQueue *vq);
@@ -177,7 +179,8 @@ void qvirtio_wait_config_isr(const QVirtioBus *bus, QVirtioDevice *d,
                              gint64 timeout_us);
 QVirtQueue *qvirtqueue_setup(const QVirtioBus *bus, QVirtioDevice *d,
                                         QGuestAllocator *alloc, uint16_t index);
-
+void qvirtqueue_cleanup(const QVirtioBus *bus, QVirtQueue *vq,
+                        QGuestAllocator *alloc);
 void qvring_init(const QGuestAllocator *alloc, QVirtQueue *vq, uint64_t addr);
 QVRingIndirectDesc *qvring_indirect_desc_setup(QVirtioDevice *d,
                                         QGuestAllocator *alloc, uint16_t elem);
diff --git a/tests/virtio-9p-test.c b/tests/virtio-9p-test.c
index 59d0f1f..ece8763 100644
--- a/tests/virtio-9p-test.c
+++ b/tests/virtio-9p-test.c
@@ -8,25 +8,145 @@
  */
 
 #include "qemu/osdep.h"
-#include <glib.h>
-#include "libqtest.h"
 #include "qemu-common.h"
+#include "libqtest.h"
+#include "libqos/libqos-pc.h"
+#include "libqos/virtio-pci.h"
+#include "libqos/virtio-mmio.h"
+#include "libqos/pci.h"
+#include "libqos/libqos.h"
+#include "libqos/virtio.h"
+#include "libqos/virtio-pci.h"
+#include "libqos/virtio-mmio.h"
+#include "libqos/pci-pc.h"
+#include "standard-headers/linux/virtio_ids.h"
+#include "standard-headers/linux/virtio_pci.h"
+#include "hw/9pfs/9p.h"
+
+static const char mount_tag[] = "qtest";
+static char test_share[] = "/tmp/qtest.XXXXXX";
+
+typedef struct {
+    QVirtioDevice *dev;
+    QOSState *qs;
+    QPCIBus *pci_bus;
+    const QVirtioBus *bus;
+    QVirtQueue *vq;
+    char *test_share;
+    uint16_t p9_req_tag;
+} QVirtIO9P;
+
+static QVirtIO9P *qvirtio_9p_start(const char *driver)
+{
+    const char *arch = qtest_get_arch();
+    const char *cmd = "-fsdev local,id=fsdev0,security_model=none,path=%s "
+                       "-device %s,fsdev=fsdev0,mount_tag=%s";
+    QVirtIO9P *v9p = g_new0(QVirtIO9P, 1);
+
+    v9p->test_share = g_strdup(test_share);
+    g_assert_nonnull(mkdtemp(v9p->test_share));
+   
+    /* temporarily support x86 only */
+    if (strcmp(arch, "i386") == 0 || strcmp(arch, "x86_64") == 0) {
+        v9p->qs = qtest_pc_boot(cmd, v9p->test_share, driver, mount_tag);
+    } else {
+        g_printerr("virtio-9p tests are only available on x86\n");
+        exit(EXIT_FAILURE);
+    }
+
+    return v9p;
+}
+
+static void qvirtio_9p_stop(QVirtIO9P *v9p)
+{
+    qtest_shutdown(v9p->qs);
+    rmdir(v9p->test_share);
+    g_free(v9p->test_share);
+    g_free(v9p);
+}
+
+static QVirtIO9P *qvirtio_9p_pci_start(void)
+{
+    QVirtIO9P *v9p = qvirtio_9p_start("virtio-9p-pci");
+    v9p->pci_bus = qpci_init_pc();
+    v9p->bus = &qvirtio_pci;
+    QVirtioPCIDevice *dev = qvirtio_pci_device_find(v9p->pci_bus,
+                                                    VIRTIO_ID_9P);
+    g_assert_nonnull(dev);
+    g_assert_cmphex(dev->vdev.device_type, ==, VIRTIO_ID_9P);
+    v9p->dev = (QVirtioDevice *) dev;
+
+    qvirtio_pci_device_enable(dev);
+    qvirtio_reset(v9p->bus, v9p->dev);
+    qvirtio_set_acknowledge(v9p->bus, v9p->dev);
+    qvirtio_set_driver(v9p->bus, v9p->dev);
+
+    v9p->vq = qvirtqueue_setup(v9p->bus, v9p->dev, v9p->qs->alloc, 0);
+    return v9p;
+}
+
+
+static void qvirtio_9p_pci_stop(QVirtIO9P *v9p)
+{
+    qvirtqueue_cleanup(v9p->bus, v9p->vq, v9p->qs->alloc);
+    qvirtio_pci_device_disable(container_of(v9p->dev, QVirtioPCIDevice, vdev));
+    qvirtio_pci_device_free((QVirtioPCIDevice *)v9p->dev);
+    qpci_free_pc(v9p->pci_bus);
+    qvirtio_9p_stop(v9p);
+}
+
 
-/* Tests only initialization so far. TODO: Replace with functional tests */
+/* Tests only initialization so far. TODO: Replace with functional tests 
 static void pci_nop(void)
 {
 }
+*/
 
-static char test_share[] = "/tmp/qtest.XXXXXX";
+static void pci_config(QVirtIO9P *v9p)
+{
+    size_t tag_len = qvirtio_config_readw(v9p->bus, v9p->dev, 0);
+    char *tag;
+    int i;
+
+    g_assert_cmpint(tag_len, ==, strlen(mount_tag));
+
+    tag = g_malloc(tag_len);
+    for (i = 0; i < tag_len; i++) {
+        tag[i] = qvirtio_config_readb(v9p->bus, v9p->dev, i + 2);
+    }
+    g_assert_cmpmem(tag, tag_len, mount_tag, tag_len);
+    g_free(tag);
+}
+
+typedef void (*v9fs_test_fn)(QVirtIO9P *v9p);
+
+static void v9fs_run_pci_test(gconstpointer data)
+{
+    v9fs_test_fn fn = data;
+    QVirtIO9P *v9p = qvirtio_9p_pci_start();
+
+    if (fn) {
+        fn(v9p);
+    }
+    qvirtio_9p_pci_stop(v9p);
+}
+
+static void v9fs_qtest_pci_add(const char *path, v9fs_test_fn fn)
+{
+    qtest_add_data_func(path, fn, v9fs_run_pci_test);
+}
 
 int main(int argc, char **argv)
 {
-    char *args;
+//    char *args;
     int ret;
 
     g_test_init(&argc, &argv, NULL);
+//    v9fs_qtest_pci_add("/virtio/9p/pci/nop", pci_nop);
+    v9fs_qtest_pci_add("/virtio/9p/pci/config", pci_config);
+ 
+/*
     qtest_add_func("/virtio/9p/pci/nop", pci_nop);
-
     g_assert(mkdtemp(test_share));
 
     args = g_strdup_printf("-fsdev local,id=fsdev0,security_model=none,path=%s "
@@ -34,11 +154,11 @@ int main(int argc, char **argv)
                            test_share);
     qtest_start(args);
     g_free(args);
-
+*/
     ret = g_test_run();
-
+/*
     qtest_end();
     rmdir(test_share);
-
+*/
     return ret;
 }
